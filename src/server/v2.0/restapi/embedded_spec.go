// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "These APIs provide services for manipulating Harbor project.",
    "title": "Harbor API",
    "version": "2.0"
  },
  "host": "localhost",
  "basePath": "/api/v2.0",
  "paths": {
    "/audit-logs": {
      "get": {
        "description": "This endpoint let user see the recent operation logs of the projects which he is member of\n",
        "tags": [
          "auditlog"
        ],
        "summary": "Get recent logs of the projects which the user is a member of",
        "operationId": "listAuditLogs",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditLog"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of auditlogs"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/logs": {
      "get": {
        "description": "Get recent logs of the projects",
        "tags": [
          "project"
        ],
        "summary": "Get recent logs of the projects",
        "operationId": "getLogs",
        "parameters": [
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditLog"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of auditlogs"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories": {
      "get": {
        "description": "List repositories of the specified project",
        "tags": [
          "repository"
        ],
        "summary": "List repositories",
        "operationId": "listRepositories",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Repository"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of repositories"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}": {
      "get": {
        "description": "Get the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Get repository",
        "operationId": "getRepository",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "put": {
        "description": "Update the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Update repository",
        "operationId": "updateRepository",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "description": "The JSON object of repository.",
            "name": "repository",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Delete repository",
        "operationId": "deleteRepository",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts": {
      "get": {
        "description": "List artifacts under the specific project and repository. Except the basic properties, the other supported queries in \"q\" includes \"tags=*\" to list only tagged artifacts, \"tags=nil\" to list only untagged artifacts, \"tags=~v\" to list artifacts whose tag fuzzy matches \"v\", \"tags=v\" to list artifact whose tag exactly matches \"v\", \"labels=(id1, id2)\" to list artifacts that both labels with id1 and id2 are added to",
        "tags": [
          "artifact"
        ],
        "summary": "List artifacts",
        "operationId": "listArtifacts",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Specify whether the tags are included inside the returning artifacts",
            "name": "with_tag",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the labels are included inside the returning artifacts",
            "name": "with_label",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the scan overview is included inside the returning artifacts",
            "name": "with_scan_overview",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Artifact"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of artifacts"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Copy the artifact specified in the \"from\" parameter to the repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Copy artifact",
        "operationId": "CopyArtifact",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "type": "string",
            "description": "The artifact from which the new artifact is copied from, the format should be \"project/repository:tag\" or \"project/repository@digest\".",
            "name": "from",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}": {
      "get": {
        "description": "Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the specific artifact",
        "operationId": "getArtifact",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Specify whether the tags are inclued inside the returning artifacts",
            "name": "with_tag",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the labels are inclued inside the returning artifacts",
            "name": "with_label",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the scan overview is inclued inside the returning artifacts",
            "name": "with_scan_overview",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is inclued inside the returning artifacts",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Artifact"
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "delete": {
        "description": "Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag",
        "tags": [
          "artifact"
        ],
        "summary": "Delete the specific artifact",
        "operationId": "deleteArtifact",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}": {
      "get": {
        "description": "Get the addition of the artifact specified by the reference under the project and repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the addition of the specific artifact",
        "operationId": "getAddition",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "enum": [
              "build_history",
              "values.yaml",
              "readme.md",
              "dependencies",
              "vulnerabilities"
            ],
            "type": "string",
            "description": "The type of addition.",
            "name": "addition",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the addition"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels": {
      "post": {
        "description": "Add label to the specified artiact.",
        "tags": [
          "artifact"
        ],
        "summary": "Add label to artifact",
        "operationId": "addLabel",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "description": "The label that added to the artifact. Only the ID property is needed.",
            "name": "label",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}": {
      "delete": {
        "description": "Remove the label from the specified artiact.",
        "tags": [
          "artifact"
        ],
        "summary": "Remove label from artifact",
        "operationId": "removeLabel",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the label that removed from the artifact.",
            "name": "label_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan": {
      "post": {
        "description": "Scan the specified artifact",
        "tags": [
          "scan"
        ],
        "summary": "Scan the artifact",
        "operationId": "scanArtifact",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/responses/202"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log": {
      "get": {
        "description": "Get the log of the scan report",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "scan"
        ],
        "summary": "Get the log of the scan report",
        "operationId": "getReportLog",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "type": "string",
            "description": "The report id to get the log",
            "name": "report_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully get scan log file",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags": {
      "get": {
        "description": "List tags of the specific artifact",
        "tags": [
          "artifact"
        ],
        "summary": "List tags",
        "operationId": "listTags",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "$ref": "#/parameters/query"
          },
          {
            "$ref": "#/parameters/page"
          },
          {
            "$ref": "#/parameters/pageSize"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is included inside the returning tags",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is included inside the returning tags",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of tags"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "Create a tag for the specified artifact",
        "tags": [
          "artifact"
        ],
        "summary": "Create tag",
        "operationId": "createTag",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "description": "The JSON object of tag.",
            "name": "tag",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201"
          },
          "400": {
            "$ref": "#/responses/400"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}": {
      "delete": {
        "description": "Delete the tag of the specified artifact",
        "tags": [
          "artifact"
        ],
        "summary": "Delete tag",
        "operationId": "deleteTag",
        "parameters": [
          {
            "$ref": "#/parameters/requestId"
          },
          {
            "$ref": "#/parameters/projectName"
          },
          {
            "$ref": "#/parameters/repositoryName"
          },
          {
            "$ref": "#/parameters/reference"
          },
          {
            "$ref": "#/parameters/tagName"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/200"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "403": {
            "$ref": "#/responses/403"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "500": {
            "$ref": "#/responses/500"
          }
        }
      }
    }
  },
  "definitions": {
    "AdditionLink": {
      "type": "object",
      "properties": {
        "absolute": {
          "description": "Determine whether the link is an absolute URL or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "href": {
          "description": "The link of the addition",
          "type": "string"
        }
      }
    },
    "AdditionLinks": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AdditionLink"
      }
    },
    "Annotations": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "Artifact": {
      "type": "object",
      "properties": {
        "addition_links": {
          "$ref": "#/definitions/AdditionLinks"
        },
        "annotations": {
          "$ref": "#/definitions/Annotations"
        },
        "digest": {
          "description": "The digest of the artifact",
          "type": "string"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "id": {
          "description": "The ID of the artifact",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "manifest_media_type": {
          "description": "The manifest media type of the artifact",
          "type": "string"
        },
        "media_type": {
          "description": "The media type of the artifact",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of the project that the artifact belongs to",
          "type": "integer",
          "format": "int64"
        },
        "pull_time": {
          "description": "The latest pull time of the artifact",
          "type": "string",
          "format": "date-time"
        },
        "push_time": {
          "description": "The push time of the artifact",
          "type": "string",
          "format": "date-time"
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "repository_id": {
          "description": "The ID of the repository that the artifact belongs to",
          "type": "integer",
          "format": "int64"
        },
        "scan_overview": {
          "description": "The overview of the scan result.",
          "$ref": "#/definitions/ScanOverview"
        },
        "size": {
          "description": "The size of the artifact",
          "type": "integer",
          "format": "int64"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "type": {
          "description": "The type of the artifact, e.g. image, chart, etc",
          "type": "string"
        }
      }
    },
    "AuditLog": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the audit log entry.",
          "type": "integer"
        },
        "op_time": {
          "description": "The time when this operation is triggered.",
          "type": "string"
        },
        "operation": {
          "description": "The operation against the repository in this log entry.",
          "type": "string"
        },
        "resource": {
          "description": "Name of the repository in this log entry.",
          "type": "string"
        },
        "resource_type": {
          "description": "Tag of the repository in this log entry.",
          "type": "string"
        },
        "username": {
          "description": "Username of the user in this log entry.",
          "type": "string"
        }
      }
    },
    "Error": {
      "description": "a model for all the error response coming from harbor",
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code",
          "type": "string"
        },
        "message": {
          "description": "The error message",
          "type": "string"
        }
      }
    },
    "Errors": {
      "description": "The error array that describe the errors got during the handling of request",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      }
    },
    "ExtraAttrs": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "Label": {
      "type": "object",
      "properties": {
        "color": {
          "description": "The color the label",
          "type": "string"
        },
        "creation_time": {
          "description": "The creation time the label",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description the label",
          "type": "string"
        },
        "id": {
          "description": "The ID of the label",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name the label",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of project that the label belongs to",
          "type": "integer",
          "format": "int64"
        },
        "scope": {
          "description": "The scope the label",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the label",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "NativeReportSummary": {
      "description": "The summary for the native report",
      "type": "object",
      "properties": {
        "complete_percent": {
          "description": "The complete percent of the scanning which value is between 0 and 100",
          "type": "integer",
          "example": 100
        },
        "duration": {
          "description": "The seconds spent for generating the report",
          "type": "integer",
          "format": "int64",
          "example": 300
        },
        "end_time": {
          "description": "The end time of the scan process that generating report",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T15:04:05"
        },
        "report_id": {
          "description": "id of the native scan report",
          "type": "string",
          "example": "5f62c830-f996-11e9-957f-0242c0a89008"
        },
        "scan_status": {
          "description": "The status of the report generating process",
          "type": "string",
          "example": "Success"
        },
        "severity": {
          "description": "The overall severity",
          "type": "string",
          "example": "High"
        },
        "start_time": {
          "description": "The start time of the scan process that generating report",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T14:04:05"
        },
        "summary": {
          "$ref": "#/definitions/VulnerabilitySummary"
        }
      }
    },
    "Platform": {
      "type": "object",
      "properties": {
        "'os.features'": {
          "description": "The features of the OS that the artifact applys to",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "'os.version'": {
          "description": "The version of the OS that the artifact applys to",
          "type": "string"
        },
        "architecture": {
          "description": "The architecture that the artifact applys to",
          "type": "string"
        },
        "os": {
          "description": "The OS that the artifact applys to",
          "type": "string"
        },
        "variant": {
          "description": "The variant of the CPU",
          "type": "string"
        }
      }
    },
    "Reference": {
      "type": "object",
      "properties": {
        "annotations": {
          "$ref": "#/definitions/Annotations"
        },
        "child_digest": {
          "description": "The digest of the child artifact",
          "type": "string"
        },
        "child_id": {
          "description": "The child ID of the reference",
          "type": "integer",
          "format": "int64"
        },
        "parent_id": {
          "description": "The parent ID of the reference",
          "type": "integer",
          "format": "int64"
        },
        "platform": {
          "$ref": "#/definitions/Platform"
        },
        "urls": {
          "description": "The download URLs",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Repository": {
      "type": "object",
      "properties": {
        "artifact_count": {
          "description": "The count of the artifacts inside the repository",
          "type": "integer",
          "format": "int64"
        },
        "creation_time": {
          "description": "The creation time of the repository",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the repository",
          "type": "string"
        },
        "id": {
          "description": "The ID of the repository",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of the repository",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of the project that the repository belongs to",
          "type": "integer",
          "format": "int64"
        },
        "pull_count": {
          "description": "The count that the artifact inside the repository pulled",
          "type": "integer",
          "format": "int64"
        },
        "update_time": {
          "description": "The update time of the repository",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ScanOverview": {
      "description": "The scan overview attached in the metadata of tag",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/NativeReportSummary"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "artifact_id": {
          "description": "The ID of the artifact that the tag attached to",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "The ID of the tag",
          "type": "integer",
          "format": "int64"
        },
        "immutable": {
          "description": "The immutable status of the tag",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "pull_time": {
          "description": "The latest pull time of the tag",
          "type": "string",
          "format": "date-time"
        },
        "push_time": {
          "description": "The push time of the tag",
          "type": "string",
          "format": "date-time"
        },
        "repository_id": {
          "description": "The ID of the repository that the tag belongs to",
          "type": "integer",
          "format": "int64"
        },
        "signed": {
          "description": "The attribute indicates whether the tag is signed or not",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "VulnerabilitySummary": {
      "description": "VulnerabilitySummary contains the total number of the foun d vulnerabilities number and numbers of each severity level.\n",
      "type": "object",
      "properties": {
        "fixable": {
          "description": "The number of the fixable vulnerabilities",
          "type": "integer",
          "format": "int",
          "example": 100
        },
        "summary": {
          "description": "Numbers of the vulnerabilities with different severity",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int",
            "example": 10
          },
          "example": {
            "Critical": 5,
            "High": 5
          }
        },
        "total": {
          "description": "The total number of the found vulnerabilities",
          "type": "integer",
          "format": "int",
          "example": 500
        }
      }
    }
  },
  "parameters": {
    "page": {
      "type": "integer",
      "format": "int64",
      "default": 1,
      "description": "The page number",
      "name": "page",
      "in": "query"
    },
    "pageSize": {
      "type": "integer",
      "format": "int64",
      "default": 10,
      "description": "The size of per page",
      "name": "page_size",
      "in": "query"
    },
    "projectId": {
      "type": "string",
      "description": "The ID of the project",
      "name": "project_id",
      "in": "path",
      "required": true
    },
    "projectName": {
      "type": "string",
      "description": "The name of the project",
      "name": "project_name",
      "in": "path",
      "required": true
    },
    "query": {
      "type": "string",
      "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
      "name": "q",
      "in": "query"
    },
    "reference": {
      "type": "string",
      "description": "The reference of the artifact, can be digest or tag",
      "name": "reference",
      "in": "path",
      "required": true
    },
    "repositoryName": {
      "type": "string",
      "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
      "name": "repository_name",
      "in": "path",
      "required": true
    },
    "requestId": {
      "minLength": 1,
      "type": "string",
      "description": "An unique ID for the request",
      "name": "X-Request-Id",
      "in": "header"
    },
    "tagName": {
      "type": "string",
      "description": "The name of the tag",
      "name": "tag_name",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "200": {
      "description": "Success",
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "201": {
      "description": "Created",
      "headers": {
        "Location": {
          "type": "string",
          "description": "The location of the resource"
        },
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "202": {
      "description": "Accepted",
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "400": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "404": {
      "description": "Not found",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "409": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "500": {
      "description": "Internal server error",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "These APIs provide services for manipulating Harbor project.",
    "title": "Harbor API",
    "version": "2.0"
  },
  "host": "localhost",
  "basePath": "/api/v2.0",
  "paths": {
    "/audit-logs": {
      "get": {
        "description": "This endpoint let user see the recent operation logs of the projects which he is member of\n",
        "tags": [
          "auditlog"
        ],
        "summary": "Get recent logs of the projects which the user is a member of",
        "operationId": "listAuditLogs",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditLog"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of auditlogs"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/logs": {
      "get": {
        "description": "Get recent logs of the projects",
        "tags": [
          "project"
        ],
        "summary": "Get recent logs of the projects",
        "operationId": "getLogs",
        "parameters": [
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AuditLog"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of auditlogs"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories": {
      "get": {
        "description": "List repositories of the specified project",
        "tags": [
          "repository"
        ],
        "summary": "List repositories",
        "operationId": "listRepositories",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Repository"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of repositories"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}": {
      "get": {
        "description": "Get the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Get repository",
        "operationId": "getRepository",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "put": {
        "description": "Update the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Update repository",
        "operationId": "updateRepository",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "description": "The JSON object of repository.",
            "name": "repository",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Repository"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete the repository specified by name",
        "tags": [
          "repository"
        ],
        "summary": "Delete repository",
        "operationId": "deleteRepository",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts": {
      "get": {
        "description": "List artifacts under the specific project and repository. Except the basic properties, the other supported queries in \"q\" includes \"tags=*\" to list only tagged artifacts, \"tags=nil\" to list only untagged artifacts, \"tags=~v\" to list artifacts whose tag fuzzy matches \"v\", \"tags=v\" to list artifact whose tag exactly matches \"v\", \"labels=(id1, id2)\" to list artifacts that both labels with id1 and id2 are added to",
        "tags": [
          "artifact"
        ],
        "summary": "List artifacts",
        "operationId": "listArtifacts",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Specify whether the tags are included inside the returning artifacts",
            "name": "with_tag",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the labels are included inside the returning artifacts",
            "name": "with_label",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the scan overview is included inside the returning artifacts",
            "name": "with_scan_overview",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is included inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Artifact"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of artifacts"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Copy the artifact specified in the \"from\" parameter to the repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Copy artifact",
        "operationId": "CopyArtifact",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The artifact from which the new artifact is copied from, the format should be \"project/repository:tag\" or \"project/repository@digest\".",
            "name": "from",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}": {
      "get": {
        "description": "Get the artifact specified by the reference under the project and repository. The reference can be digest or tag.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the specific artifact",
        "operationId": "getArtifact",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": true,
            "description": "Specify whether the tags are inclued inside the returning artifacts",
            "name": "with_tag",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the labels are inclued inside the returning artifacts",
            "name": "with_label",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the scan overview is inclued inside the returning artifacts",
            "name": "with_scan_overview",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is inclued inside the returning artifacts",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is inclued inside the tags of the returning artifacts. Only works when setting \"with_tag=true\"",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Artifact"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete the artifact specified by the reference under the project and repository. The reference can be digest or tag",
        "tags": [
          "artifact"
        ],
        "summary": "Delete the specific artifact",
        "operationId": "deleteArtifact",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/additions/{addition}": {
      "get": {
        "description": "Get the addition of the artifact specified by the reference under the project and repository.",
        "tags": [
          "artifact"
        ],
        "summary": "Get the addition of the specific artifact",
        "operationId": "getAddition",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "build_history",
              "values.yaml",
              "readme.md",
              "dependencies",
              "vulnerabilities"
            ],
            "type": "string",
            "description": "The type of addition.",
            "name": "addition",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            },
            "headers": {
              "Content-Type": {
                "type": "string",
                "description": "The content type of the addition"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels": {
      "post": {
        "description": "Add label to the specified artiact.",
        "tags": [
          "artifact"
        ],
        "summary": "Add label to artifact",
        "operationId": "addLabel",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "description": "The label that added to the artifact. Only the ID property is needed.",
            "name": "label",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Label"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/labels/{label_id}": {
      "delete": {
        "description": "Remove the label from the specified artiact.",
        "tags": [
          "artifact"
        ],
        "summary": "Remove label from artifact",
        "operationId": "removeLabel",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The ID of the label that removed from the artifact.",
            "name": "label_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan": {
      "post": {
        "description": "Scan the specified artifact",
        "tags": [
          "scan"
        ],
        "summary": "Scan the artifact",
        "operationId": "scanArtifact",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/scan/{report_id}/log": {
      "get": {
        "description": "Get the log of the scan report",
        "produces": [
          "text/plain"
        ],
        "tags": [
          "scan"
        ],
        "summary": "Get the log of the scan report",
        "operationId": "getReportLog",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The report id to get the log",
            "name": "report_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully get scan log file",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags": {
      "get": {
        "description": "List tags of the specific artifact",
        "tags": [
          "artifact"
        ],
        "summary": "List tags",
        "operationId": "listTags",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
            "name": "q",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 1,
            "description": "The page number",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 10,
            "description": "The size of per page",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the signature is included inside the returning tags",
            "name": "with_signature",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Specify whether the immutable status is included inside the returning tags",
            "name": "with_immutable_status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Tag"
              }
            },
            "headers": {
              "Link": {
                "type": "string",
                "description": "Link refers to the previous page and next page"
              },
              "X-Total-Count": {
                "type": "integer",
                "description": "The total count of tags"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a tag for the specified artifact",
        "tags": [
          "artifact"
        ],
        "summary": "Create tag",
        "operationId": "createTag",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "description": "The JSON object of tag.",
            "name": "tag",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Tag"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "The location of the resource"
              },
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    },
    "/projects/{project_name}/repositories/{repository_name}/artifacts/{reference}/tags/{tag_name}": {
      "delete": {
        "description": "Delete the tag of the specified artifact",
        "tags": [
          "artifact"
        ],
        "summary": "Delete tag",
        "operationId": "deleteTag",
        "parameters": [
          {
            "minLength": 1,
            "type": "string",
            "description": "An unique ID for the request",
            "name": "X-Request-Id",
            "in": "header"
          },
          {
            "type": "string",
            "description": "The name of the project",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
            "name": "repository_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The reference of the artifact, can be digest or tag",
            "name": "reference",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "The name of the tag",
            "name": "tag_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/Errors"
            },
            "headers": {
              "X-Request-Id": {
                "type": "string",
                "description": "The ID of the corresponding request for the response"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AdditionLink": {
      "type": "object",
      "properties": {
        "absolute": {
          "description": "Determine whether the link is an absolute URL or not",
          "type": "boolean",
          "x-omitempty": false
        },
        "href": {
          "description": "The link of the addition",
          "type": "string"
        }
      }
    },
    "AdditionLinks": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AdditionLink"
      }
    },
    "Annotations": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "Artifact": {
      "type": "object",
      "properties": {
        "addition_links": {
          "$ref": "#/definitions/AdditionLinks"
        },
        "annotations": {
          "$ref": "#/definitions/Annotations"
        },
        "digest": {
          "description": "The digest of the artifact",
          "type": "string"
        },
        "extra_attrs": {
          "$ref": "#/definitions/ExtraAttrs"
        },
        "id": {
          "description": "The ID of the artifact",
          "type": "integer",
          "format": "int64"
        },
        "labels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Label"
          }
        },
        "manifest_media_type": {
          "description": "The manifest media type of the artifact",
          "type": "string"
        },
        "media_type": {
          "description": "The media type of the artifact",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of the project that the artifact belongs to",
          "type": "integer",
          "format": "int64"
        },
        "pull_time": {
          "description": "The latest pull time of the artifact",
          "type": "string",
          "format": "date-time"
        },
        "push_time": {
          "description": "The push time of the artifact",
          "type": "string",
          "format": "date-time"
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Reference"
          }
        },
        "repository_id": {
          "description": "The ID of the repository that the artifact belongs to",
          "type": "integer",
          "format": "int64"
        },
        "scan_overview": {
          "description": "The overview of the scan result.",
          "$ref": "#/definitions/ScanOverview"
        },
        "size": {
          "description": "The size of the artifact",
          "type": "integer",
          "format": "int64"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "type": {
          "description": "The type of the artifact, e.g. image, chart, etc",
          "type": "string"
        }
      }
    },
    "AuditLog": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The ID of the audit log entry.",
          "type": "integer"
        },
        "op_time": {
          "description": "The time when this operation is triggered.",
          "type": "string"
        },
        "operation": {
          "description": "The operation against the repository in this log entry.",
          "type": "string"
        },
        "resource": {
          "description": "Name of the repository in this log entry.",
          "type": "string"
        },
        "resource_type": {
          "description": "Tag of the repository in this log entry.",
          "type": "string"
        },
        "username": {
          "description": "Username of the user in this log entry.",
          "type": "string"
        }
      }
    },
    "Error": {
      "description": "a model for all the error response coming from harbor",
      "type": "object",
      "properties": {
        "code": {
          "description": "The error code",
          "type": "string"
        },
        "message": {
          "description": "The error message",
          "type": "string"
        }
      }
    },
    "Errors": {
      "description": "The error array that describe the errors got during the handling of request",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Error"
      }
    },
    "ExtraAttrs": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "Label": {
      "type": "object",
      "properties": {
        "color": {
          "description": "The color the label",
          "type": "string"
        },
        "creation_time": {
          "description": "The creation time the label",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description the label",
          "type": "string"
        },
        "id": {
          "description": "The ID of the label",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name the label",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of project that the label belongs to",
          "type": "integer",
          "format": "int64"
        },
        "scope": {
          "description": "The scope the label",
          "type": "string"
        },
        "update_time": {
          "description": "The update time of the label",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "NativeReportSummary": {
      "description": "The summary for the native report",
      "type": "object",
      "properties": {
        "complete_percent": {
          "description": "The complete percent of the scanning which value is between 0 and 100",
          "type": "integer",
          "example": 100
        },
        "duration": {
          "description": "The seconds spent for generating the report",
          "type": "integer",
          "format": "int64",
          "example": 300
        },
        "end_time": {
          "description": "The end time of the scan process that generating report",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T15:04:05"
        },
        "report_id": {
          "description": "id of the native scan report",
          "type": "string",
          "example": "5f62c830-f996-11e9-957f-0242c0a89008"
        },
        "scan_status": {
          "description": "The status of the report generating process",
          "type": "string",
          "example": "Success"
        },
        "severity": {
          "description": "The overall severity",
          "type": "string",
          "example": "High"
        },
        "start_time": {
          "description": "The start time of the scan process that generating report",
          "type": "string",
          "format": "date-time",
          "example": "2006-01-02T14:04:05"
        },
        "summary": {
          "$ref": "#/definitions/VulnerabilitySummary"
        }
      }
    },
    "Platform": {
      "type": "object",
      "properties": {
        "'os.features'": {
          "description": "The features of the OS that the artifact applys to",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "'os.version'": {
          "description": "The version of the OS that the artifact applys to",
          "type": "string"
        },
        "architecture": {
          "description": "The architecture that the artifact applys to",
          "type": "string"
        },
        "os": {
          "description": "The OS that the artifact applys to",
          "type": "string"
        },
        "variant": {
          "description": "The variant of the CPU",
          "type": "string"
        }
      }
    },
    "Reference": {
      "type": "object",
      "properties": {
        "annotations": {
          "$ref": "#/definitions/Annotations"
        },
        "child_digest": {
          "description": "The digest of the child artifact",
          "type": "string"
        },
        "child_id": {
          "description": "The child ID of the reference",
          "type": "integer",
          "format": "int64"
        },
        "parent_id": {
          "description": "The parent ID of the reference",
          "type": "integer",
          "format": "int64"
        },
        "platform": {
          "$ref": "#/definitions/Platform"
        },
        "urls": {
          "description": "The download URLs",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Repository": {
      "type": "object",
      "properties": {
        "artifact_count": {
          "description": "The count of the artifacts inside the repository",
          "type": "integer",
          "format": "int64"
        },
        "creation_time": {
          "description": "The creation time of the repository",
          "type": "string",
          "format": "date-time"
        },
        "description": {
          "description": "The description of the repository",
          "type": "string"
        },
        "id": {
          "description": "The ID of the repository",
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "description": "The name of the repository",
          "type": "string"
        },
        "project_id": {
          "description": "The ID of the project that the repository belongs to",
          "type": "integer",
          "format": "int64"
        },
        "pull_count": {
          "description": "The count that the artifact inside the repository pulled",
          "type": "integer",
          "format": "int64"
        },
        "update_time": {
          "description": "The update time of the repository",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ScanOverview": {
      "description": "The scan overview attached in the metadata of tag",
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/NativeReportSummary"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "artifact_id": {
          "description": "The ID of the artifact that the tag attached to",
          "type": "integer",
          "format": "int64"
        },
        "id": {
          "description": "The ID of the tag",
          "type": "integer",
          "format": "int64"
        },
        "immutable": {
          "description": "The immutable status of the tag",
          "type": "boolean",
          "x-omitempty": false
        },
        "name": {
          "description": "The name of the tag",
          "type": "string"
        },
        "pull_time": {
          "description": "The latest pull time of the tag",
          "type": "string",
          "format": "date-time"
        },
        "push_time": {
          "description": "The push time of the tag",
          "type": "string",
          "format": "date-time"
        },
        "repository_id": {
          "description": "The ID of the repository that the tag belongs to",
          "type": "integer",
          "format": "int64"
        },
        "signed": {
          "description": "The attribute indicates whether the tag is signed or not",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "VulnerabilitySummary": {
      "description": "VulnerabilitySummary contains the total number of the foun d vulnerabilities number and numbers of each severity level.\n",
      "type": "object",
      "properties": {
        "fixable": {
          "description": "The number of the fixable vulnerabilities",
          "type": "integer",
          "format": "int",
          "example": 100
        },
        "summary": {
          "description": "Numbers of the vulnerabilities with different severity",
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int",
            "example": 10
          },
          "example": {
            "Critical": 5,
            "High": 5
          }
        },
        "total": {
          "description": "The total number of the found vulnerabilities",
          "type": "integer",
          "format": "int",
          "example": 500
        }
      }
    }
  },
  "parameters": {
    "page": {
      "type": "integer",
      "format": "int64",
      "default": 1,
      "description": "The page number",
      "name": "page",
      "in": "query"
    },
    "pageSize": {
      "type": "integer",
      "format": "int64",
      "default": 10,
      "description": "The size of per page",
      "name": "page_size",
      "in": "query"
    },
    "projectId": {
      "type": "string",
      "description": "The ID of the project",
      "name": "project_id",
      "in": "path",
      "required": true
    },
    "projectName": {
      "type": "string",
      "description": "The name of the project",
      "name": "project_name",
      "in": "path",
      "required": true
    },
    "query": {
      "type": "string",
      "description": "Query string to query resources. Supported query patterns are \"exact match(k=v)\", \"fuzzy match(k=~v)\", \"range(k=[min~max])\", \"list with union releationship(k={v1 v2 v3})\" and \"list with intersetion relationship(k=(v1 v2 v3))\". The value of range and list can be string(enclosed by \" or '), integer or time(in format \"2020-04-09 02:36:00\"). All of these query patterns should be put in the query string \"q=xxx\" and splitted by \",\". e.g. q=k1=v1,k2=~v2,k3=[min~max]",
      "name": "q",
      "in": "query"
    },
    "reference": {
      "type": "string",
      "description": "The reference of the artifact, can be digest or tag",
      "name": "reference",
      "in": "path",
      "required": true
    },
    "repositoryName": {
      "type": "string",
      "description": "The name of the repository. If it contains slash, encode it with URL encoding. e.g. a/b -\u003e a%252Fb",
      "name": "repository_name",
      "in": "path",
      "required": true
    },
    "requestId": {
      "minLength": 1,
      "type": "string",
      "description": "An unique ID for the request",
      "name": "X-Request-Id",
      "in": "header"
    },
    "tagName": {
      "type": "string",
      "description": "The name of the tag",
      "name": "tag_name",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "200": {
      "description": "Success",
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "201": {
      "description": "Created",
      "headers": {
        "Location": {
          "type": "string",
          "description": "The location of the resource"
        },
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "202": {
      "description": "Accepted",
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "400": {
      "description": "Bad request",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "404": {
      "description": "Not found",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "409": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    },
    "500": {
      "description": "Internal server error",
      "schema": {
        "$ref": "#/definitions/Errors"
      },
      "headers": {
        "X-Request-Id": {
          "type": "string",
          "description": "The ID of the corresponding request for the response"
        }
      }
    }
  },
  "securityDefinitions": {
    "basicAuth": {
      "type": "basic"
    }
  }
}`))
}
